import copy
from dataclasses import dataclass, field
from json import dumps
from .helpers import unique_id


# input data generator class for the bar chart widget

@dataclass
class BarChart:
    """
    Create data for Chart.js for the purpose of displaying a bespoke bar chart widget for Hydronet dashboards.

    The widget shows a comparison of current values for a range of metrics with reference values for those metrics,
    as well as in relation to a target.
    Visualization is a horizontal bar chart with one group of bars for each metric.
    The target shown as a horizontal line.

    Bar colors are selected from a standard color palette, though default color palette choice can be
    overridden by specifying a custom palette choice, and palette colours can be overridden by specifying
    color as part of the bar data. See color_mngmnt.py for more information on palette selection.

    y_labels -- the list of metrics for which data is provided

    y_label_images -- if you want an image to show beside a metric label, specify the name of the image file here

    data -- a list of dicts, each corresponding to one series of metrics. Usually there would be two entries, one
            for the current metrics, and one for the expected metrics. At a minimum, each dict should have a
            'label' entry that specifies the label for the dict (e.g., 'current'), and a 'data' list that gives
            the metric values. Color and various other attributes can also be specified. See Chart.js documentation
            for additional details on specifying data series for bar chart plots.

    bar_labels -- a dict with descriptive labels for display in the centre of the bars. One entry per metric series,
                  containing a 'label' attribute that lists the display labels, plus optional formatting information
                  (e.g., 'current': {'labels': ['12ha', '20 trees'], ...},
                         'expected': {'labels': ['15 ha (2021)', '30 trees'], 'color': 'white', ...})


    Additional optional class attributes are available to override default behaviour. These include

    color_pal -- specify a color palette for colouring the bars. See color_mngmnt.py for options.

    target -- usually metric values would be given as a percentage of their target so all metrics can be
              displayed on a single value axis.Target is therefore preset to 100 (100%).
              Override target value here if required.

    show_target -- show a target line?

    responsive -- should chart be responsive?

    legend -- show legend?

    title -- show chart title?

    stacked -- show data series stacked?

    additional_data -- additional data to be passed to Chart.js. If entries are provided
                       that are also generated by this class, the entries provided here will override,
                       so use with caution.

    additional_opts -- additional 'options' to be passed to Chart.js/ Same cautions as fpr 'additional_data' apply.

    canvas -- a unique id for the canvas that the widget is to be drawn on (auto-generated if not supplied)
    """

    y_labels: [list, tuple]
    data: [list, tuple]
    bar_labels: dict
    y_label_images: [list, tuple] = ()
    color_pal: str = ''
    target: int = 100
    show_target: bool = True
    responsive: bool = True
    legend: bool = False
    title: bool = False
    stacked: bool = False
    target_label: str = 'Target'
    additional_data: dict = field(default_factory=lambda: {})
    additional_opts: dict = field(default_factory=lambda: {})
    canvas: str = ''

    @property
    def canvas_id(self):
        """ Return canvas id, automatically generate if not supplied """
        return self.canvas if len(self.canvas) > 0 else unique_id('viz-bar-')

    @property
    def chartopts(self):
        """ Return 'options' data structure for use with Chart.js (see Chart.js doc for details) """
        return self.make_chart_opts()

    @property
    def chartdata(self):
        """ Return 'data' data structure for use with Chart.js (see Chart.js doc for details) """
        return self.make_chart_data()

    def make_chart_opts(self):
        """ Build options data structure for use with Chart.js (see Chart.js doc for details) """
        bar_labels = copy.deepcopy(self.bar_labels)
        for bl in bar_labels:
            # need to bracket all data series with dummy entries so the target line can extend beyond the bars
            bar_labels[bl]['labels'] = [''] + list(bar_labels[bl]['labels']) + ['']
        opts = {'responsive': self.responsive,
                'indexAxis': 'y',  # for horizontal layout
                'barValueSpacing': 20,
                'layout': {
                    'padding': {'left': 50, 'right': 30}, },  # create space for images to go with the y labels
                'scales': {
                    'x': {'display': False, 'stacked': self.stacked},
                    'y': {'grid': {'display': False},
                          'border': {'display': False},
                          'stacked': self.stacked}, },
                # data and parameters for plugins are passed through the plugins dict as part of the chart options
                'plugins': {'legend': {'display': False, },
                            'barLabelPlugin': bar_labels,
                            'targetLabelPlugin': {'display': self.show_target, 'label': self.target_label}, }, }
        y_label_images = list(self.y_label_images)
        if len(y_label_images) > 0:
            # pad with dummy entries
            y_label_images = [''] + y_label_images + ['']
            # add plugin to show images next to y labels
            opts['plugins']['labelImagesPlugin'] = y_label_images

        # add other optional parameters and plugins here as needed
        opts.update(self.additional_opts)
        # return chart opts as JSON string
        return dumps(opts)

    def make_chart_data(self):
        """ Build 'data' data structure for use with Chart.js (see Chart.js doc for details)

        Add axis attribute to each data series, and also bracket data with dummy entries.
        The dummy entries are a convenient way to extend the target line beyond the data categories. """

        def prepare_ds(e):
            e['axis'] = 'y'  # needed for horizontal axis display
            e['data'] = [0] + list(e['data']) + [0]  # dummy entries
            return e

        data = list(copy.deepcopy(self.data))
        ds = list(map(prepare_ds, data))
        ds_labels = [""] + list(self.y_labels) + [""]  # same dummy entry padding treatment for category labels
        if self.show_target:
            n = len(ds[0]['data'])
            # now add the target as a dotted line, same axis as the horizontal bars
            target_line = {'type': 'line',
                           'axis': 'y',
                           'data': [100 for i in range(0, n)],
                           'backgroundColor': "black",
                           'borderColor': "black",
                           'fill': False,
                           'pointStyle': False,
                           'borderDash': [3, 10],
                           }
            # put the target line first here, so it is drawn over top of the bars
            ds = [target_line] + ds
        chart_data = {'labels': ds_labels, 'datasets': ds, }
        chart_data.update(self.additional_data)  # merge in additional data; this also gives user the option to override
        # return chart data as JSON string
        return dumps(chart_data)
